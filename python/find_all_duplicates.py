# Generated by You.com "Pythons Functions" Agent
import os
import hashlib
import argparse
import sys

def calculate_file_hash(file_path, chunk_size=1024):
    """
    Calculate the SHA256 hash of a file.

    Args:
        file_path (str): The path to the file.
        chunk_size (int): Size of chunks to read the file in bytes (default is 1024).

    Returns:
        str: The SHA256 hash of the file contents.
    """
    hash_sha256 = hashlib.sha256()
    try:
        with open(file_path, "rb") as file:
            for chunk in iter(lambda: file.read(chunk_size), b""):
                hash_sha256.update(chunk)
    except (OSError, IOError) as e:
        print(f"Error reading file {file_path}: {e}")
        return None
    return hash_sha256.hexdigest()


def find_duplicate_files(directory):
    """
    Walk through a file system and find duplicate files based on content.

    Args:
        directory (str): The root directory to start the search.

    Returns:
        list of list: A list of lists where each inner list contains the full paths of duplicate files.
    """
    file_hashes = {}  # Dictionary to map file hash to a list of file paths

    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            file_hash = calculate_file_hash(file_path)
            if file_hash:
                if file_hash in file_hashes:
                    # Append to the list of duplicate files for this hash
                    file_hashes[file_hash].append(file_path)
                else:
                    # Create a new list for this hash
                    file_hashes[file_hash] = [file_path]

    # Filter out hashes that do not have duplicates
    duplicates = [paths for paths in file_hashes.values() if len(paths) > 1]

    return duplicates


def main():
    """
    Main entry point for the program. Parses command-line arguments and finds duplicate files.
    """
    # Ensure proper usage with exactly one argument
    if len(sys.argv) != 2:
        print("Error: This program requires exactly one argument.")
        print("Usage: python find_duplicates.py <directory>")
        sys.exit(1)

    directory = sys.argv[1]

    # Validate that the argument is a directory
    if not os.path.isdir(directory):
        print(f"Error: The specified path '{directory}' is not a directory or does not exist.")
        print("Usage: python find_duplicates.py <directory>")
        sys.exit(1)

    print(f"Searching for duplicate files in '{directory}'...")
    duplicates = find_duplicate_files(directory)

    if duplicates:
        print("\nDuplicate files found:")
        for duplicate_group in duplicates:
            print("Duplicate group:")
            for file_path in duplicate_group:
                print(f"  {file_path}")
            print("-" * 40)
    else:
        print("No duplicate files found.")


if __name__ == "__main__":
    main()